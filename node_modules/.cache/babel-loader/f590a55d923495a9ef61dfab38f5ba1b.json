{"ast":null,"code":"var _jsxFileName = \"/home/saahil/Desktop/SE-Project/cometchatsdk/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport { Widget, addResponseMessage, addUserMessage, dropMessages } from 'react-chat-widget'; //import config from './config';\n\nimport 'react-chat-widget/lib/styles.css'; //to get the style of it \n//import { createSecureServer } from 'http2';\n\nvar request = require(\"request\");\n\nconst appid = '11117c8bb5adb87';\nconst apikey = '3244e1da16d747391d68a8e5c6a75a25ab8458c1';\n\nvar request = require(\"request\");\n\nconst agentUID = '';\nconst customerUID = ''; //const CUSTOMER_MESSAGE_LISTENER_KEY = \"client-listener\";\n\nconst limit = 30;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleNewUserMessage = newMessage => {\n      console.log(\"New message incomig! \".concat(newMessage)); // Now send the message throught the backend API\n\n      let uid = localStorage.getItem(customerUID);\n\n      if (uid === null) {\n        this.createuser().then(result => {\n          console.log('auth token fetched', result);\n          localStorage.setItem(\"cc-uid\", customerUID);\n          sendMessage();\n        });\n      }\n\n      this.sendMessage(newMessage).then(message => {\n        console.log('Message sent successfully:', message);\n      }, error => {\n        console.log('Message sending failed with error:', error);\n      });\n    };\n\n    this.createuser = function () {\n      var uid = new Date().getTime();\n      var name = 'customer';\n      var options = {\n        method: 'POST',\n        url: 'https://api-eu.cometchat.io/v2.0/users',\n        headers: {\n          appid: appid,\n          apikey: apikey,\n          'content-type': 'application/json',\n          accept: 'application/json'\n        },\n        body: '{\"uid\":' + uid + ',\"name\":' + name + '\"role\":\"default\",\"metadata\":\"{@private:{\\\\\\\"email\\\\\\\":\\\\\\\"user@email.com\\\\\\\"}}\",\"withAuthToken\":true}'\n      };\n      request(options, function (error, response, body) {\n        if (error) throw new Error(error);\n        console.log(response);\n        return response;\n      });\n    };\n\n    this.sendMessage = async () => {\n      var options = {\n        method: 'POST',\n        url: 'https://api-eu.cometchat.io/v2.0/users/subjectUid/messages',\n        headers: {\n          appid: '11117c8bb5adb87',\n          apikey: '3244e1da16d747391d68a8e5c6a75a25ab8458c1',\n          'content-type': 'application/json',\n          accept: 'application/json'\n        },\n        body: '{\"receiver\":\"superhero5\",\"receiverType\":\"user\",\"category\":\"message\",\"type\":\"text\",\"data\":{\"text\":\"Hi Tom!\",\"metadata\":{\"key1\":\"value1\",\"key2\":\"value2\"}}}'\n      };\n      request(options, function (error, response, body) {\n        if (error) throw new Error(error);\n        console.log(body);\n      });\n    };\n  }\n\n  componentDidMount() {\n    addResponseMessage('You are now chatting with your broker ');\n    addResponseMessage('Do not share sensitive data with the broker');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Widget, {\n      handleNewUserMessage: this.handleNewUserMessage,\n      title: \"Broker-Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/saahil/Desktop/SE-Project/cometchatsdk/my-app/src/App.js"],"names":["React","Component","Widget","addResponseMessage","addUserMessage","dropMessages","request","require","appid","apikey","agentUID","customerUID","limit","App","handleNewUserMessage","newMessage","console","log","uid","localStorage","getItem","createuser","then","result","setItem","sendMessage","message","error","Date","getTime","name","options","method","url","headers","accept","body","response","Error","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Widget, addResponseMessage, addUserMessage, dropMessages } from 'react-chat-widget';\n//import config from './config';\nimport 'react-chat-widget/lib/styles.css';//to get the style of it \n//import { createSecureServer } from 'http2';\n\n\nvar request = require(\"request\");\n\nconst appid='11117c8bb5adb87';\nconst apikey='3244e1da16d747391d68a8e5c6a75a25ab8458c1';\n\n\nvar request = require(\"request\");\n\nconst agentUID = '';\nconst customerUID='';\n\n//const CUSTOMER_MESSAGE_LISTENER_KEY = \"client-listener\";\nconst limit = 30;\nclass App extends Component {\n  componentDidMount() {\n    addResponseMessage('You are now chatting with your broker ');\n    addResponseMessage('Do not share sensitive data with the broker');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Widget\n          handleNewUserMessage={this.handleNewUserMessage}\n          title='Broker-Chat'\n\n        />\n      </div>\n    );\n  }\n\n  handleNewUserMessage = (newMessage) => {\n    \n    console.log(`New message incomig! ${newMessage}`);\n    // Now send the message throught the backend API\n    let uid = localStorage.getItem(customerUID);\n    if (uid === null) {\n    this.createuser().then(result =>{\n      console.log('auth token fetched', result);\n          localStorage.setItem(\"cc-uid\",customerUID)\n          sendMessage()\n    })\n    \n  }\n\n  this.sendMessage(newMessage).then(\n    message => {\n    console.log('Message sent successfully:', message);\n  },\n  error => {\n    console.log('Message sending failed with error:', error);\n  });\n  };\n\ncreateuser = function (){\n  var uid= new Date().getTime()\n  var  name = 'customer';\n  var options = {\n    method: 'POST',\n    url: 'https://api-eu.cometchat.io/v2.0/users',\n    headers: {\n      appid: appid,\n      apikey:apikey,\n      'content-type': 'application/json',\n      accept: 'application/json'\n    },\n    body: '{\"uid\":'+uid+',\"name\":'+name+'\"role\":\"default\",\"metadata\":\"{@private:{\\\\\\\"email\\\\\\\":\\\\\\\"user@email.com\\\\\\\"}}\",\"withAuthToken\":true}'\n  };\n  request(options, function (error, response, body) {\n    if (error) throw new Error(error);\n    console.log(response);\n    return response;\n    \n  });  \n\n\n}\n\n// createuser=   async() => {\n//   //var uid= new Date().getTime().toString();\n//   //var  name = 'customer';\n\n//   var options = {\n//     method: 'POST',\n//     url: 'https://api-eu.cometchat.io/v2.0/users',\n//     headers: {\n//       appid: appid,\n//       apikey:apikey,\n//       'content-type': 'application/json',\n//       accept: 'application/json'\n//     },\n//     body: '{\"uid\":'+uid+',\"name\":\"name\",\"role\":\"default\",\"metadata\":\"{@private:{\\\\\\\"email\\\\\\\":\\\\\\\"user@email.com\\\\\\\"}}\",\"withAuthToken\":true}'\n//   };\n  \n//   request(options, function (error, response, body) {\n//     if (error) throw new Error(error);\n  \n//     console.log(response);\n//   });\n\n  \n//   request(options, function (error, response, body) {\n//     if (error) throw new Error(error);\n  \n//     //console.log(body);\n//     console.log(response);\n//   });\n// }\nsendMessage =async() =>\n{\n  var options = {\n    method: 'POST',\n    url: 'https://api-eu.cometchat.io/v2.0/users/subjectUid/messages',\n    headers: {\n      appid: '11117c8bb5adb87',\n      apikey: '3244e1da16d747391d68a8e5c6a75a25ab8458c1',\n      'content-type': 'application/json',\n      accept: 'application/json'\n    },\n    body: '{\"receiver\":\"superhero5\",\"receiverType\":\"user\",\"category\":\"message\",\"type\":\"text\",\"data\":{\"text\":\"Hi Tom!\",\"metadata\":{\"key1\":\"value1\",\"key2\":\"value2\"}}}'\n  };\n  \n  \n  request(options, function (error, response, body) {\n    if (error) throw new Error(error);\n  \n    console.log(body);\n  });\n}\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}